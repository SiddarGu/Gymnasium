import os
import re
from collections import defaultdict

import gymnasium as gym
from gymnasium.envs.registration import find_highest_version, get_env_id
from utils import trim


filtered_envs = defaultdict(list)
exclude_env_names = [
    "GymV21Environment",
    "GymV26Environment",
    "FrozenLake8x8",
    "LunarLanderContinuous",
    "BipedalWalkerHardcore",
    "phys2d/CartPole",
    "phys2d/Pendulum",
    "tabular/Blackjack",
]
for env_spec in gym.registry.values():
    if get_env_id(env_spec.namespace, env_spec.name, None) not in exclude_env_names:
        highest_version = find_highest_version(env_spec.namespace, env_spec.name)
        env_id = get_env_id(env_spec.namespace, env_spec.name, highest_version)

        env_spec = gym.spec(env_id)
        if (
            isinstance(env_spec.entry_point, str)
            and "gymnasium" in env_spec.entry_point
        ):
            env_module = env_spec.entry_point.split(".")[2]

            if env_spec not in filtered_envs[env_module]:
                filtered_envs[env_module].append(env_spec)

# print(filtered_envs.keys())
for env_module, env_specs in filtered_envs.items():
    env_module_name = env_module.replace("_", " ").title()
    print(env_module_name)
    env_specs = sorted(env_specs, key=lambda spec: spec.name)

    for i, env_spec in enumerate(env_specs):
        print(f"\t{i=}, {env_spec.name}")
        env = gym.make(env_spec)
        env_docstring = trim(env.unwrapped.__doc__)
        assert env_docstring

        snake_env_name = re.sub(r"(?<!^)(?=[A-Z])", "_", env_spec.name).lower()
        title_env_name = re.sub(r"(?<!^)(?=[A-Z])", " ", env_spec.name).title()

        if i == 0:
            related_pages_meta = "firstpage:\n"
        elif i == len(env_specs) - 1:
            related_pages_meta = "lastpage:\n"
        else:
            related_pages_meta = ""

        action_space_table = env.action_space.__repr__().replace("\n", "")
        observation_space_table = env.observation_space.__repr__().replace("\n", "")

        env_page = f"""---
autogenerated:
title: {title_env_name}
{related_pages_meta}---

# {title_env_name}

```{{figure}} ../../_static/videos/{env_module}/{snake_env_name}.gif
:width: 200px
:name: {snake_env_name}
```

This environment is part of the {env_module_name} environments which contains general information about the environment.

|   |   |
|---|---|
| Action Space | `{re.sub(' +', ' ', action_space_table)}` |
| Observation Space | `{re.sub(' +', ' ', observation_space_table)}` |
| import | `gymnasium.make("{env.spec.id}")` |

{env_docstring}
"""

        env_md_path = os.path.join(
            os.path.dirname(__file__),
            "..",
            "environments",
            env_module,
            snake_env_name + ".md",
        )

        front_matter = "---\nautogenerated:\ntitle: " + title_env_name + "\n" + related_pages_meta + "---"
        title = "# " + title_env_name
        gif = (
            "```{figure}"
            + " ../../_static/videos/" + env_type + "/" + snake_env_name + ".gif"
            + " \n:width: 200px\n:name: " + snake_env_name + "\n```"
        )
        info = (
            "This environment is part of the "
            + "<a href='..'>" + env_type_title + "environments</a>."
            + "Please read that page first for general information."
        )
        env_table = "|   |   |\n|---|---|\n"
        env_table += "| Action Space |" + env.action_space + "|\n"

        if env.observation_space.shape:
            env_table += "| Observation Shape |" + env.observation_space.shape + "|\n"

            if hasattr(env.observation_space, "high"):
                high = env.observation_space.high

                if hasattr(high, "shape"):
                    if len(high.shape) == 3:
                        high = high[0][0][0]
                if env_type == "mujoco":
                    high = high[0]
                high = np.round(high, 2)
                high = str(high).replace("\n", " ")
                env_table += "| Observation High |" + high + "|\n"

            if hasattr(env.observation_space, "low"):
                low = env.observation_space.low
                if hasattr(low, "shape"):
                    if len(low.shape) == 3:
                        low = low[0][0][0]
                if env_type == "mujoco":
                    low = low[0]
                low = np.round(low, 2)
                low = str(low).replace("\n", " ")
                env_table += "| Observation Low |" + low + "|\n"
        else:
            env_table += "| Observation Space |" + env.observation_space + "|\n"

        env_table += '| Import | `gymnasium.make("' + env_spec.id + '")` | \n'

        if docstring is None:
            docstring = "No information provided"
        all_text = front_matter + "\n\n" + title + "\n\n" + gif + "\n\n" + info + "\n\n" + env_table + "\n\n" + docstring
        
        file = open(v_path, "w", encoding="utf-8")
        file.write(all_text)
        file.close()
